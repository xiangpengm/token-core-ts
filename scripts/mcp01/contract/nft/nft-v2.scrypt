import "../txUtil.scrypt";
import "nftProto.scrypt";
import "../backtrace.scrypt";
import "nftAmountCheckProto.scrypt";

/**
 * Nft contract
 * @constructor
 * @param unlockContractCodeHashArray {bytes[]} nftUnlockContractCheck contract code hash
*/
contract Nft {

    bytes[5] unlockContractCodeHashArray;

    /**
    * @function unlock
    * @param txPreimage {SigHashPreimage} preimage
    * @param prevouts {bytes} previous outputs
    * @param prevNftAddress {bytes} the owner address of previous nft contract
    * @param genesisScript {bytes} the nft genesis locking script, only needed when use a new generated nft for the first time
    * @param senderPubKey {PubKey} the owner's pubkey, only transfer need
    * @param senderSig {Sig} the sig of owner private key, only transfer need
    * @param receiverAddress {bytes} the receiverAddress, only transfer need
    * @param nftOutputSatoshis {int} the nft output contract satoshis, only transfer need
    * @param opReturnScript {bytes} op_false op_return script, optional, only transfer need
    * @param changeAddress {Ripemd160} change bsv address, only transfer need
    * @param checkInputIndex {int} nftUnlockContractCheck contract input index, only unlockFromContract need
    * @param checkScriptTx {bytes} nftUnlockContractCheck contract raw tx, only unlockFromContract need
    * @param lockContractInputIndex {int} lock contract input index, only unlockFromContract need
    * @param lockContractTx {bytes} lock contract raw tx, only unlockFromContract need
    * @param opration {int} 1 transfer, 2 unlockFromContract
    */
    public function unlock(
        SigHashPreimage txPreimage,
        bytes prevouts,
        // nft
        int prevNftInputIndex,
        bytes prevNftAddress,
        bytes nftTxHeader,
        TxInputProof nftTxInputProof,
        TxOutputProof prevNftTxProof,
        bytes genesisScript,

        // contract,op=2
        int contractInputIndex,
        TxOutputProof contractTxProof,
        // unlockCheck, op=2
        int amountCheckHashIndex,
        int amountCheckInputIndex,
        TxOutputProof amountCheckTxProof,
        bytes amountCheckScript,

        // sig, op=1
        PubKey senderPubKey,
        Sig senderSig,
        // output
        bytes receiverAddress, // op=1
        int nftOutputSatoshis, // op=1
        bytes opReturnScript, // op=1
        Ripemd160 changeAddress, // op=1
        int changeSatoshis, // op=1

        int operation) {

        // verify this tx's version
        require(Utils.fromLEUnsigned(SigHash.nVersion(txPreimage)) == ProtoHeader.TX_VERSION);

        require(hash256(prevouts) == SigHash.hashPrevouts(txPreimage));

        // get nftScript
        bytes nftScript = SigHash.scriptCode(txPreimage);
        int nftScriptLen = len(nftScript);
        bytes nftScriptCodeSha256 = sha256(NftProto.getScriptCode(nftScript, nftScriptLen)); 
        require(NftProto.getTokenIndex(nftScript, nftScriptLen) < NftProto.getTotalSupply(nftScript, nftScriptLen));

        // backtrace
        bytes sensibleID = NftProto.getGenesisTxid(nftScript, nftScriptLen);
        bytes thisOutpoint = SigHash.outpoint(txPreimage);
        // verify tx and prevTx script
        Backtrace.verify(thisOutpoint, nftTxHeader, prevNftInputIndex, prevNftTxProof, sensibleID, nftTxInputProof);

        if (sensibleID != hash256(prevNftTxProof.txHeader) + nftTxInputProof.outputIndexBytes) {
            // backtrace to nft contract
            // verify prev nft script data and script code
            bytes prevNftScript = NftProto.getNewNftScript(nftScript, nftScriptLen, prevNftAddress);
            bool backtraceToken = (sha256(prevNftScript) == prevNftTxProof.scriptHash);

            if (!backtraceToken) {
                // genesis
                int genesisScriptLen = len(genesisScript);
                require(NftProto.getTokenIndex(nftScript, nftScriptLen) == NftProto.getTokenIndex(genesisScript, genesisScriptLen));
                bytes newGenesisScript = NftProto.getNewGenesisScript(genesisScript, genesisScriptLen, sensibleID, 0);
                // verify genesisScript
                require(sha256(genesisScript) == prevNftTxProof.scriptHash);
                bytes genesisHash = NftProto.getGenesisHash(nftScript, nftScriptLen);
                require(hash160(newGenesisScript) == genesisHash);
            }
        }

        if (operation == NftProto.OP_TRANSFER) {
            // check output
            bytes nftOutputScript = NftProto.getNewNftScript(nftScript, nftScriptLen, receiverAddress);
            bytes nftOutput = Utils.buildOutput(nftOutputScript, nftOutputSatoshis);

            bytes opReturnOutput = b'';
            if (len(opReturnScript) > 0) {
                require(opReturnScript[: 2] == b'006a');
                opReturnOutput = Utils.buildOutput(opReturnScript, 0);
            }

            bytes changeOutput = TxUtil.genMvcOutput(changeSatoshis, changeAddress);

            bytes outputs = nftOutput + opReturnOutput + changeOutput;
            bytes hashOutputs = hash256(outputs);
            require(hashOutputs == SigHash.hashOutputs(txPreimage));

            // checkSig
            bytes senderAddress = NftProto.getNftAddress(nftScript, nftScriptLen);
            require(senderAddress != NftProto.BURN_ADDRESS);
            require(hash160(senderPubKey) == senderAddress);
            require(checkSig(senderSig, senderPubKey));
        }
        else {

            bytes contractHash = NftProto.getNftAddress(nftScript, nftScriptLen);

            // verify lockContract
            if (contractHash != NftProto.BURN_ADDRESS) {
                require(contractHash == ripemd160(contractTxProof.scriptHash));
                // verify the contract locking script
                bytes contractOutpoint = prevouts[contractInputIndex * TxUtil.OUTPOINT_LEN : (contractInputIndex + 1) * TxUtil.OUTPOINT_LEN];
                TxUtil.verifyTxOutput(contractTxProof, contractOutpoint);
            }

            bytes amountCheckOutpoint = prevouts[amountCheckInputIndex * TxUtil.OUTPOINT_LEN : (amountCheckInputIndex + 1) * TxUtil.OUTPOINT_LEN];
            // verify amountCheckData belong amountCheckScript
            require(sha256(amountCheckScript) == amountCheckTxProof.scriptHash);
            TxUtil.verifyTxOutput(amountCheckTxProof, amountCheckOutpoint);

            int amountCheckScriptLen = len(amountCheckScript);

            // check sensibleID and nftCodeHash
            bytes nftID = NftProto.getNftID(nftScript, nftScriptLen);
            require(nftID == AmountCheckProto.getNftID(amountCheckScript, amountCheckScriptLen));

            bytes nftCodeHash = ripemd160(nftScriptCodeSha256);
            require(nftCodeHash == AmountCheckProto.getNftCodeHash(amountCheckScript, amountCheckScriptLen));

            bytes hash = hash160(amountCheckScript[: amountCheckScriptLen - AmountCheckProto.DATA_OFFSET]);
            require(hash == this.unlockContractCodeHashArray[amountCheckHashIndex]);
        }

        require(Tx.checkPreimageSigHashType(txPreimage, ProtoHeader.SIG_HASH_ALL));
        require(true);
    }
}
