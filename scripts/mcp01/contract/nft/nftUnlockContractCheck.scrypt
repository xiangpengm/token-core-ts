import "nftProto.scrypt";
import "nftAmountCheckProto.scrypt";
import "../txUtil.scrypt";

// opreturn + nftCodeHash + nftID
contract NftUnlockContractCheck {

    static const int MAX_OUTPUT = 3;

    function verifyOutput(bytes output, int nftScriptLen, bytes nftID) : bool {
        bytes b = output[8 :];
        int n = Utils.fromLEUnsigned(b[: 1]);
        int sum = 0;
        int offset = 0;
        if (n < 0xfd) {
            sum = 1 + n;
            offset = 1;
        }
        else if (n == 0xfd) {
            sum = 3 + Utils.fromLEUnsigned(b[1 : 3]);
            offset = 3;
        }
        else if (n == 0xfe) {
            sum = 5 + Utils.fromLEUnsigned(b[1 : 5]);
            offset = 5;
        }
        else {
            // n == 0xff
            // not support 8 bytes length output
            //sum = 9 + Util.fromLEUnsigned(b[1:9]);
            //offset = 9;
            require(false);
        }
        require(len(output) == sum + 8);
        // check if other output is the same token output
        bytes script = output[8 + offset :];
        if (nftScriptLen == len(script)) {
            require(NftProto.getNftID(script, nftScriptLen) != nftID);
        }
        return true;
    }

    public function unlock(
        SigHashPreimage txPreimage,
        bytes prevouts,
        // nft
        int nftInputIndex,
        bytes nftScript,
        bytes nftTxHeader,
        bytes nftTxHashProof,
        bytes nftSatoshiBytes,
        // output
        int nOutputs,
        int txNftOutputIndex,
        bytes nftOutputAddress,
        int nftOutputSatoshis,
        bytes otherOutputArray) {

        require(hash256(prevouts) == SigHash.hashPrevouts(txPreimage));

        bytes thisScript = SigHash.scriptCode(txPreimage);
        int scriptLen = len(thisScript);
        bytes nftID = AmountCheckProto.getNftID(thisScript, scriptLen);
        bytes nftCodeHash = AmountCheckProto.getNftCodeHash(thisScript, scriptLen);

        // verify nftScript
        int nftScriptLen = len(nftScript);
        bytes nftOutpoint = prevouts[nftInputIndex * TxUtil.OUTPOINT_LEN : (nftInputIndex + 1) * TxUtil.OUTPOINT_LEN];
        TxOutputProof nftProof = { nftTxHeader, nftTxHashProof, nftSatoshiBytes, sha256(nftScript) };
        TxUtil.verifyTxOutput(nftProof, nftOutpoint);

        require(nftCodeHash == NftProto.getScriptCodeHash(nftScript, nftScriptLen));
        require(nftID == NftProto.getNftID(nftScript, nftScriptLen));
        bytes nftAddress = NftProto.getNftAddress(nftScript, nftScriptLen);

        bool isBurn = false;
        if (nftAddress == NftProto.BURN_ADDRESS) {
            isBurn = true;
        }
        else {
            require(txNftOutputIndex >= 0);
            require(txNftOutputIndex < nOutputs);
        }

        // check the outputs
        bytes outputs = b'';
        // max support loop num receiver, you can change this num, but will cause the contrac size increase. you can customize your output
        int otherOutputIndex = 0;
        require(nOutputs <= MAX_OUTPUT);
        loop (MAX_OUTPUT) : i {
            if (i < nOutputs) {
                if (i == txNftOutputIndex && isBurn == false) {
                    bytes outputScript = NftProto.getNewNftScript(nftScript, nftScriptLen, nftOutputAddress);
                    bytes output = Utils.buildOutput(outputScript, nftOutputSatoshis);
                    outputs += output;
                }
                else {
                    int outputLen = Utils.fromLEUnsigned(otherOutputArray[otherOutputIndex : otherOutputIndex + 4]);
                    bytes output = otherOutputArray[otherOutputIndex + 4 : otherOutputIndex + 4 + outputLen];

                    // verify output
                    this.verifyOutput(output, nftScriptLen, nftID);

                    outputs += output;
                    otherOutputIndex += 4 + outputLen;
                }
            }
        }
        bytes hashOutputs = hash256(outputs);
        require(hashOutputs == SigHash.hashOutputs(txPreimage));

        require(Tx.checkPreimageSigHashTypeOCS(txPreimage, ProtoHeader.SIG_HASH_ALL));
    }
}
