import "../txUtil.scrypt";
import "tokenProto.scrypt";
import "tokenAmountCheckProto.scrypt";
import "../backtrace.scrypt";

contract TokenUnlockContractCheck {

    static const int MAX_INPUT = 2;
    static const int MAX_OUTPUT = 5;

    function verifyOutput(bytes output, int tokenScriptLen, bytes tokenID) : bool {
        bytes b = output[8 :];
        int n = Utils.fromLEUnsigned(b[: 1]);
        int sum = 0;
        int offset = 0;
        if (n < 0xfd) {
            sum = 1 + n;
            offset = 1;
        }
        else if (n == 0xfd) {
            sum = 3 + Utils.fromLEUnsigned(b[1 : 3]);
            offset = 3;
        }
        else if (n == 0xfe) {
            sum = 5 + Utils.fromLEUnsigned(b[1 : 5]);
            offset = 5;
        }
        else {
            // not support 8 bytes length output
            require(false);
        }
        // check if other output is the same token output
        require(len(output) == sum + 8);
        bytes script = output[8 + offset :];
        if (tokenScriptLen == len(script)) {
            require(TokenProto.getTokenID(script, tokenScriptLen) != tokenID);
        }
        return true;
    }

    /**
     * @function unlock
     * @param txPreimage {SigHashPreimage} preimage of tx.
     * @param prevouts {bytes} previous outputs.
     * @param tokenScript {bytes} the one of input token contracts's locking script
     * @param tokenTxHeaderArray {bytes} the tx header in input token tx's output proof 
     * @param tokenTxHashProofArray {bytes} the hash proof in input token tx's output proof 
     * @param tokenSatoshiBytesArray {bytes} the satoshis in input token tx's output proof 
     * @param inputTokenAddressArray {bytes} the address array of input token utxos
     * @param inputTokenAmountArray {bytes} the amount array of input token utxos
     * @param nOutputs {int} the length of this tx outputs
     * @param tokenOutputIndexArray {bytes} the token output index array in this tx
     * @param tokenOutputSatoshis {int} token output satoshis
     * @param otherOutputArray {bytes} the output of this tx excluding token output
    */
    public function unlock(
        SigHashPreimage txPreimage,
        bytes prevouts,
        bytes tokenScript,
        bytes tokenTxHeaderArray,
        bytes tokenTxHashProofArray,
        bytes tokenSatoshiBytesArray,
        bytes inputTokenAddressArray,
        bytes inputTokenAmountArray,
        int nOutputs,
        bytes tokenOutputIndexArray,
        int tokenOutputSatoshis,
        bytes otherOutputArray) {

        require(hash256(prevouts) == SigHash.hashPrevouts(txPreimage));

        bytes thisScript = SigHash.scriptCode(txPreimage);
        int thisScriptLen = len(thisScript);

        // verify tokenScript
        int tokenScriptLen = len(tokenScript);
        bytes tokenID = TokenProto.getTokenID(tokenScript, tokenScriptLen);
        require(thisScript[thisScriptLen - AmountCheckProto.TOKEN_ID_OFFSET : thisScriptLen - AmountCheckProto.TOKEN_ID_OFFSET + ProtoHeader.UNIQUE_ID_LEN] == tokenID);
        bytes tokenScriptCode = TokenProto.getScriptCode(tokenScript, tokenScriptLen);
        require(thisScript[thisScriptLen - AmountCheckProto.TOKEN_CODE_HASH_OFFSET : thisScriptLen - AmountCheckProto.TOKEN_ID_OFFSET] == hash160(tokenScriptCode));
        require(TokenProto.checkDataLen(tokenScript, tokenScriptLen));

        // get receiver data
        int nReceivers = Utils.fromLEUnsigned(thisScript[thisScriptLen -  AmountCheckProto.NRECERIVERS_OFFSET: thisScriptLen - AmountCheckProto.TOKEN_CODE_HASH_OFFSET]);
        require(nReceivers >= 0);

        int addressLen = nReceivers * ProtoHeader.ADDRESS_LEN;
        int pos = thisScriptLen - AmountCheckProto.NRECERIVERS_OFFSET - addressLen;
        bytes receiverArray = thisScript[pos : pos + addressLen];

        int amountLen = nReceivers * ProtoHeader.AMOUNT_LEN;
        pos -= amountLen;
        bytes receiverTokenAmountArray = thisScript[pos : pos + amountLen];
        int nSenders = Utils.fromLEUnsigned(thisScript[pos - 4 : pos]);
        pos -= 4;

        bytes inputTokenIndexArray = thisScript[pos - 4 * nSenders : pos];

        // check token inputs
        bool isBurn = true;
        bool hasBurningAddress = false;
        int sumInputToken = 0;
        require(nSenders <= MAX_INPUT);
        // max support loop num input token
        int prevIndex = -1;
        int hashProofPos = 0;
        loop (MAX_INPUT) : i {
            if (i < nSenders) {

                int inputIndex = Utils.fromLEUnsigned(inputTokenIndexArray[i * 4 : (i + 1) * 4]);
                require(prevIndex < inputIndex);
                prevIndex = inputIndex;
                bytes tokenOutpoint = prevouts[inputIndex * 36 : (inputIndex + 1) * 36];
                bytes tokenTxHeader = tokenTxHeaderArray[i * TxUtil.TX_HEADER_LEN : (i + 1) * TxUtil.TX_HEADER_LEN];

                bytes address = inputTokenAddressArray[i * 20 : (i + 1) * 20];
                // input token address should all be burning address or not
                if (address != TokenProto.BURN_ADDRESS) {
                    isBurn = false;
                }
                else {
                    hasBurningAddress = true;
                }

                // get new token input script data
                int amount = Utils.fromLEUnsigned(inputTokenAmountArray[i * 8 : (i + 1) * 8]);
                bytes newTokenScript = TokenProto.getNewTokenScript(tokenScript, tokenScriptLen, address, amount);

                int hashProofLen = Utils.fromLEUnsigned(tokenTxHashProofArray[hashProofPos: hashProofPos + 4]);
                bytes hashProof = tokenTxHashProofArray[hashProofPos + 4: hashProofPos + 4 + hashProofLen];
                hashProofPos += 4 + hashProofLen;
                // verify token inputs's script code
                bytes satoshiBytes = tokenSatoshiBytesArray[i * 8: (i + 1) * 8];
                bytes scriptHash = sha256(newTokenScript);
                TxOutputProof proof = {tokenTxHeader, hashProof, satoshiBytes, scriptHash};
                TxUtil.verifyTxOutput(proof, tokenOutpoint);

                sumInputToken = sumInputToken + amount;
            }
        }

        // check the outputs
        bytes outputs = b'';
        int sumOutputToken = 0;
        int tokenIndex = 0;
        int otherOutputIndex = 0;
        int tokenOutIndex = nOutputs + 1;
        if (nReceivers > 0) {
            tokenOutIndex = Utils.fromLEUnsigned(tokenOutputIndexArray[0 : 4]);
        }
        int prevTokenOutIndex = -1;
        require(nOutputs <= MAX_OUTPUT);
        loop (MAX_OUTPUT) : i {
            if (i < nOutputs) {
                if (i == tokenOutIndex) {
                    require(prevTokenOutIndex < tokenOutIndex);
                    bytes address = receiverArray[tokenIndex * ProtoHeader.ADDRESS_LEN : (tokenIndex + 1) * ProtoHeader.ADDRESS_LEN];
                    int tokenAmount = Utils.fromLEUnsigned(receiverTokenAmountArray[tokenIndex * ProtoHeader.AMOUNT_LEN : (tokenIndex + 1) * ProtoHeader.AMOUNT_LEN]);
                    require(tokenAmount > 0);
                    sumOutputToken += tokenAmount;
                    bytes outputScript = TokenProto.getNewTokenScript(tokenScript, tokenScriptLen, address, tokenAmount);
                    bytes output = Utils.buildOutput(outputScript, tokenOutputSatoshis);
                    outputs += output;
                    tokenIndex += 1;
                    if (tokenIndex < nReceivers) {
                        prevTokenOutIndex = tokenOutIndex;
                        tokenOutIndex = Utils.fromLEUnsigned(tokenOutputIndexArray[tokenIndex * 4 : (tokenIndex + 1) * 4]);
                    }
                }
                else {
                    int outputLen = Utils.fromLEUnsigned(otherOutputArray[otherOutputIndex : otherOutputIndex + 4]);
                    bytes output = otherOutputArray[otherOutputIndex + 4 : otherOutputIndex + 4 + outputLen];

                    this.verifyOutput(output, tokenScriptLen, tokenID);

                    outputs += output;
                    otherOutputIndex += 4 + outputLen;
                }
            }
        }
        if (isBurn) {
            require(sumOutputToken == 0);
        }
        else {
            require(hasBurningAddress == false);
            require(sumInputToken == sumOutputToken);
        }
        bytes hashOutputs = hash256(outputs);
        require(hashOutputs == SigHash.hashOutputs(txPreimage));

        // check preimage ocs
        require(Tx.checkPreimageSigHashTypeOCS(txPreimage, ProtoHeader.SIG_HASH_ALL));
    }
}
